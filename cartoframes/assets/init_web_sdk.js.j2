async function initialize() {
  const basemap = '{{ basemap }}';
  const bounds = {{ bounds }};
  const camera = {{ camera|tojson }};
  const layersDef = {{ layers|tojson }};

  let credentials = null;
  let layer = null;
  let source = null;
  let style = null;
  let widget = null;

  const deckMap = carto.viz.createMap({
    basemap: basemap,
    initialViewState: camera
  });

  let layerI = layersDef.length - 1;  // Their "IDs" are reversed
  for (const layerDef of layersDef) {
    if (layerDef.type === 'Query') {
        credentials = new carto.Credentials(layerDef.credentials.username, layerDef.credentials.api_key, layerDef.credentials.base_url);
        source = new carto.viz.CARTOSource(layerDef.data, {credentials});

    } else {
        source = new carto.viz.GeoJsonSource(layerDef.data);
    }

    if (!!layerDef.viz && !!layerDef.viz.value) {
      style = carto.viz[layerDef.viz.name](layerDef.viz.value, layerDef.viz.options);

    } else if (!!layerDef.viz) {
      style = carto.viz[layerDef.viz.name](layerDef.viz.options);
    }

    layer = new carto.viz.Layer(source, style);

    if (!!layerDef.interactivity.hover) {
      await layer.setPopupHover(layerDef.interactivity.hover);
    }

    if (!!layerDef.interactivity.click) {
      await layer.setPopupClick(layerDef.interactivity.click);
    }

    await layer.addTo(deckMap);

    let widgetI = 0;
    for (const widgetDef of layerDef.widgets) {
      if (widgetDef.type === 'category') {
        widget = new carto.dataview.Category(layer, widgetDef.value, {
          operation: 'count',
          operationColumn: 'cartodb_id',
          mode: 'local'
        });
      }

      new carto.widget.Category(`as-category-widget#layer${layerI}_widget${widgetI}`, widget, {
        showClearButton: true,
        disableInteractivity: widgetDef.options.readOnly
      });

      widgetI++;
    }

    layerI--;
  }

  const {viewport} = deckMap.layerManager.context;
  const {longitude, latitude, zoom} = viewport.fitBounds(bounds);
  const viewState = Object.assign({}, {longitude, latitude, zoom}, camera);

  deckMap.viewManager.setProps({
    viewState: viewState
  });
}

initialize();

async function initialize() {
  const basemap = '{{ basemap }}';
  const bounds = {{ bounds }};
  const camera = {{ camera|tojson }};
  const layersDef = {{ layers|tojson }};

  for (const layerDef of layersDef) {
    if (!!layerDef.credentials) {
      carto.setDefaultCredentials({
        username: layerDef.credentials.username,
        apiKey: layerDef.credentials.api_key,
        serverUrlTemplate: layerDef.credentials.base_url
      });

      break;
    }
  }

  const deckMap = carto.viz.createMap({
    basemap: basemap,
    initialViewState: camera
  });

  let layer = null;
  let style = null;
  for (const layerDef of layersDef) {
    if (!!layerDef.viz && !!layerDef.viz.value) {
      style = carto.viz[layerDef.viz.name](layerDef.viz.value, layerDef.viz.options);

    } else if (!!layerDef.viz) {
      style = carto.viz[layerDef.viz.name](layerDef.viz.options);
    }

    layer = new carto.viz.Layer(layerDef.data, style);

    if (!!layerDef.interactivity.hover) {
      await layer.setPopupHover(layerDef.interactivity.hover);
    }

    if (!!layerDef.interactivity.click) {
      await layer.setPopupClick(layerDef.interactivity.click);
    }

    await layer.addTo(deckMap);
  }

  const {viewport} = deckMap.layerManager.context;
  const {longitude, latitude, zoom} = viewport.fitBounds(bounds);
  const viewState = Object.assign({}, {longitude, latitude, zoom}, camera);

  deckMap.viewManager.setProps({
    viewState: viewState
  });
}

initialize();

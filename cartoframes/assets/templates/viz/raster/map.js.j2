{# {% if has_legends %}
  {% include 'viz/raster/legends.js.j2' %}
{% endif %} #}
{% include 'error/parser.js.j2' %}
{% include 'utils/base64.js.j2' %}
{% include 'utils/format.js.j2' %}

const responsive = document.querySelector('as-responsive-content');

function onReady() {

  const map = L.map('map', {
    zoom: 1,
    center: [0, 0]
  });

  const BASEMAPS = {
    DarkMatter: 'https://{s}.basemaps.cartocdn.com/rastertiles/dark_all/{z}/{x}/{y}.png',
    Voyager: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}.png',
    Positron: 'https://{s}.basemaps.cartocdn.com/rastertiles/light_all/{z}/{x}/{y}.png'
  };

  let basemap = BASEMAPS['{{basemap}}'] || '{{basemap}}';
  if (L.Browser.retina) {
    basemap = basemap.replace('.png', '@2x.png');
  }

  L.tileLayer(basemap).addTo(map);

  const mapInfo$ = document.getElementById('map-info');

  {% if show_info %}
    function updateMapInfo() {
      const center = map.getCenter();
      const lat = center.lat.toFixed(6);
      const lng = center.lng.toFixed(6);
      const zoom = map.getZoom();

      mapInfo$.innerText = `viewport={'zoom': ${zoom}, 'lat': ${lat}, 'lng': ${lng}}`;
    }

    map.on('zoom', updateMapInfo);
    map.on('move', updateMapInfo);
  {% endif %}

  map.fitBounds({{bounds}}, { animate: false });


  const layers = {{layers|tojson}};
  const mapLayers = [];

  const popup = L.popup({ closeButton: false });

  layers.forEach((layer, index) => {
    const client = new carto.Client({
      apiKey: layer.credentials['api_key'] || 'default_public',
      username: layer.credentials['username']
    });

    if (layer.type === 'Query') {
      const defaultStyle = `
        marker-width: 3;
        [zoom > 2] {
          marker-width: 5;
        }
        marker-fill: #EE4D5A;
        marker-line-width: 0;
        marker-line-color: #222;
        marker-allow-overlap: true;
      `;

      const source = new carto.source.SQL(layer.query);
      const style = new carto.style.CartoCSS(`
        #layer {
          ${layer.style || defaultStyle}
        }
      `);
      const mapLayer = new carto.layer.Layer(source, style);

      mapLayers.push(mapLayer);

      client.addLayer(mapLayer);
      client.getLeafletLayer().addTo(map);

      if (layer.interactivity) {
        layer.interactivity.forEach((interactivityDef) => {
          const columns = interactivityDef.attrs.map((item) => {
            if (item.title.startsWith('$')) {
              return item.title.substring(1);
            } else {
              return item.title;
            }
          });
          if (interactivityDef.event == 'click') {
            mapLayer.setFeatureClickColumns(columns);
            mapLayer.on('featureClicked', (featureEvent) => {
              openPopup(featureEvent, columns);
            });
          } else if (interactivityDef.event == 'hover') {
            mapLayer.setFeatureOverColumns(columns);
            mapLayer.on('featureOver', (featureEvent) => {
              openPopup(featureEvent, columns);
            });
            mapLayer.on('featureOut', closePopup);
          }
        });
      }
    }

    if (layer.type === 'GeoJSON') {
      const geojsonMarkerOptions = {
        radius: 3,
        weight: 1,
        color: '#222',
        fillColor: '#EE4D5A',
        opacity: 0.3,
        fillOpacity: 1
      };

      L.geoJSON(_decodeJSONQuery(layer.query), {
        pointToLayer: function (feature, latlng) {
          return L.circleMarker(latlng, geojsonMarkerOptions);
        },
        attribution: [
          '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',
          ' &copy; <a href=\"https://carto.com\">CARTO</a>'
        ]
      }).addTo(map);
    }
  });

  function openPopup(featureEvent, columns) {
    let content = '<div class="popup-content">';

    columns.forEach((column) => {
      const value = featureEvent.data[column];
      if (value) {
        content += `<span class="popup-name">${column}</span>`;
        content += `<span class="popup-value">${formatValue(value)}</span>`;
      }
    });

    content += `</div>`;

    popup.setContent(content);
    popup.setLatLng(featureEvent.latLng);
    if (!popup.isOpen()) {
      popup.openOn(map);
    }
  }

  function closePopup(featureEvent) {
    popup.removeFrom(map);
  }
}

function setReady () {
  try {
    onReady()
  } catch (e) {
    displayError(e);
  }
}

function displayError(e) {
  const error$ = document.getElementById('error-container');
  const errors$ = error$.getElementsByClassName('errors');
  const stacktrace$ = document.getElementById('error-stacktrace');

  errors$[0].innerHTML = e.name;
  errors$[1].innerHTML = e.name;
  errors$[2].innerHTML = e.type;
  errors$[3].innerHTML = e.message.replace(e.type, '');

  error$.style.visibility = 'visible';

  const stack = parse(e.stack);
  const list = stack.map(item => {
    return `<li>
      at <span class="stacktrace-method">${item.methodName}:</span>
      (${item.file}:${item.lineNumber}:${item.column})
    </li>`;
  });

  stacktrace$.innerHTML = list.join('\n');
}

function _decodeJSONQuery(query) {
  return JSON.parse(Base64.decode(query.replace(/b\'/, '\'')))
}

responsive.addEventListener('ready', setReady);

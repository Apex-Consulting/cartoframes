{% include 'utils/format.js.j2' %}

function renderWidget(widget, variable) {
  widget.element = widget.element || document.querySelector(`#${widget.id}`);

  const value = variable ? variable.value : widget.value;
  widget.element.innerText = typeof value === 'number' ? format(value) : value;
}

function renderBridge(bridge, widget) {
  widget.element = widget.element || document.querySelector(`#${widget.id}`);

  switch (widget.type) {
    case 'histogram':
      bridge.histogram(widget.element, widget.value, widget.options);
      break;
    case 'category':
      bridge.category(widget.element, widget.value, widget.options);
      break;
    case 'animation':
      const options = { ...widget.options, variableName: widget.name };
      bridge.animationControls(widget.element, widget.column, options);
      break;
    default:
      widget.element.innerText = typeof widget.value === 'number' ? format(widget.value) : widget.value;
      break;
  }
}

function bridgeLayerWidgets(carto, mapLayer, mapSource, map, widgets) {
  const bridge = new AsBridge.VL.Bridge({
    carto: carto,
    layer: mapLayer,
    source: mapSource,
    map: map
  });

  widgets
    .filter((widget) => !widget.has_bridge)
    .forEach((widget) => renderBridge(bridge, widget));

  bridge.build();
}

{% include 'utils/format.js.j2' %}

function renderWidget(layer, source, map, widget, variable) {
  if (widget.type === 'formula') {
    element.innerText = format(variable.value);
  } else if (widget.type === 'animation') {
    const variableName = widget.name;

    const bridge = new AsBridge.VL.Bridge({
      carto: carto,
      layer: layer,
      source: source,
      map: map
    });

    bridge.animationControls(widget.element, widget.column, widget.prop, widget.name);
    bridge.build();

  } else {
    element.innerText = variable ? variable.value : widget.value;
  }
}

function bridgeLayerWidgets(carto, mapLayer, mapSource, map, widgets) {
  const bridge = new AsBridge.VL.Bridge({
    carto: carto,
    layer: mapLayer,
    source: mapSource,
    map: map
  });

  widgets
    .filter((widget) => !widget.has_variable)
    .forEach((widget) => {
      switch (widget.type) {
        case 'histogram':
          bridge.histogram(widget.element, widget.value, widget.options);
          break;
        case 'category':
          bridge.category(widget.element, widget.value, widget.options);
          break;
      }
    });

  bridge.build();
}
